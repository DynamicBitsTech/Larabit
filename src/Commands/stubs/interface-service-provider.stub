<?php

namespace App\Interfaces;

use Illuminate\Support\ServiceProvider;

class InterfaceServiceProvider extends ServiceProvider
{
    public function boot()
    {
    }

    public function register()
    {
        /**
         * This associative array pairs abstract classes with their corresponding concrete classes.
         * 
         * Structure: 
         *   Key: Abstract class
         *   Value: Concrete class
         * 
         * Example Usage:
         *   $toBind = [
         *       AbstractClass::class => ConcreteClass::class,
         *       AnotherAbstract::class => AnotherConcrete::class,
         *       // Add more pairs as needed...
         *   ];
         * 
         * This mapping is used for establishing relationships between abstract definitions and their implementations.
         */
        $toBind = [];

        foreach ($toBind as $interface => $implementation) {
            $this->app->bind($interface, $implementation);
        }
    }
}

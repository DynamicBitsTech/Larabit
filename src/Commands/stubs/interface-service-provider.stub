<?php

namespace App\Interfaces;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Str;

class InterfaceServiceProvider extends ServiceProvider
{
    protected array $toBind = [];

    public function boot()
    {
    }

    public function register()
    {
        $this->getServiceInterfaces();
        $this->getRepositoryInterfaces();

        $this->bindInterfacesAndImplementations();
    }

    /**
     * Get service interfaces and their bindings.
     *
     * @return void
     */
    protected function getServiceInterfaces(): void
    {
        $this->getInterfacesFromDirectory(
            'Services',
            'Service'
        );
    }

    /**
     * Get repository interfaces and their bindings.
     *
     * @return void
     */
    protected function getRepositoryInterfaces(): void
    {
        $this->getInterfacesFromDirectory(
            'Repositories',
            'Repository'
        );
    }

    /**
     * Get interfaces from a given directory.
     *
     * @param string $directory
     * @param string $suffix
     * @return void
     */
    protected function getInterfacesFromDirectory($directory, $suffix): void
    {
        $interfaceDirectory = app_path("Interfaces\\$directory");

        foreach (glob("$interfaceDirectory/*{$suffix}Interface.php") as $file) {
            $resource = Str::of($file)
                ->replace("$interfaceDirectory/", '')
                ->replace("{$suffix}Interface.php", '')
                ->studly();

            $this->toBind = array_merge($this->toBind, [
                "App\Interfaces\\$directory\\{$resource}{$suffix}Interface" => "App\\$directory\\$resource$suffix"
            ]);
        }
    }

    /**
     * Bind interfaces with implementations.
     *
     * @return void
     */
    protected function bindInterfacesAndImplementations(): void
    {
        foreach ($this->toBind as $interface => $implementation) {
            $this->app->bind($interface, $implementation);
        }
    }
}
